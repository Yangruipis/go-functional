                            ━━━━━━━━━━━━━━━
                             GO-FUNCTIONAL

                               yangruipis
                            ━━━━━━━━━━━━━━━


Table of Contents
─────────────────

1. Features
2. Installation
3. Usage
4. API list





1 Features
══════════

  Go-functional is inspired by [PyFunctional] and [go-func] . It makes
  golang struct data processing easier, especially when we have a data
  pipeline. Go-functionl is:

  FAST
        there is no reflect at all
  CHAIN
        chain functional operations
  LAZY
        most trainsformation operations are lazy evaluated
  SIMPLE
        use generic, all you need is a `Map' , instead of `MapInt'
        `MapInt32' `MapInt64' …
  USER-FRIENDLY
        `Spark' style APIs is provided, maybe `LinQ' someday.


[PyFunctional] <https://github.com/EntilZha/PyFunctional>

[go-func] <https://github.com/thoas/go-funk>


2 Installation
══════════════

  `go>=1.18'

  ┌────
  │ go get github.com/Yangruipis/go-functional
  └────


3 Usage
═══════

  ┌────
  │ package main
  │ 
  │ import (
  │   "fmt"
  │ 
  │   fun "github.com/Yangruipis/go-functional/pkg"
  │ )
  │ 
  │ func main() {
  │   fun.RangeSeq(0, 10, 1).Map(func(k, v int) (int, int) {
  │     return k, v + 1
  │   }).Filter(func(k, v int) bool { return v >= 3 }).ForEach(func(i, v int) {
  │     fmt.Printf("%d\n", v)
  │   })
  │ }
  └────


4 API list
══════════

  There are two types of API(consistent with Spark):

  1. Transformation: Iterator in, iterator out. Will not be executed
     until action operation. Iterator is supposed to be consumed only
     once.
  2. Action: Iterator in, results out. All transformation operations are
     executed here (lazy exec).

  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   progress[34/49]  func         signature                      type                 
  ───────────────────────────────────────────────────────────────────────────────────
   [X]              Map          [T1, T2] -> [T1, T2]           transformation       
   [X]              Filter       [T1, T2] -> [T1, T2]           transformation       
   [X]              Flatten      [T1, []T2] -> [T1, T2]         transformation       
   [X]              GroupBy      [T1, T2] -> [T1, []T2]         transformation       
   [X]              GroupByKey   [T1, T2] -> [T1, []T2]         transformation       
   [X]              GroupByVal   [T1, T2] -> [T2, []T1]         transformation       
   [X]              FlatMap      [T1, []T2] -> [T1, []T2]       transformation       
   [X]              ReduceByKey  [T1, []T2] -> [T1, T2]         transformation       
   [X]              CountByKey   [T1, T2] -> [T1, int]          transformation       
   [X]              CountByVal   [T1, T2] -> [T2, int]          transformation       
   [X]              Union        [T1, T2] [T1, T2] -> [T1, T2]  transformation       
   [X]              Intersect    [T1, T2] [T1, T2] -> [T1, T2]  transformation       
   [X]              Subtract     [T1, T2] [T1, T2] -> [T1, T2]  transformation       
   [X]              Distinct     [T1, T2] -> [T1, T2]           transformation       
   [X]              UnionBy      [T1, T2] [T1, T2] -> [T1, T2]  transformation       
   [X]              IntersectBy  [T1, T2] [T1, T2] -> [T1, T2]  transformation       
   [X]              SubtractBy   [T1, T2] [T1, T2] -> [T1, T2]  transformation       
   [X]              DistinctBy   [T1, T2] -> [T1, T2]           transformation       
   [X]              Cartesian    [T1, T2] [T1, T2] -> [T1, T2]  transformation       
   [X]              Chunk        [T1, T2] -> [T1, []T2]         transformation       
   [X]              Sort         [T1, T2] -> [T1, T2]           transformation       
   [X]              Aggregate    [T1, T2] -> [T1, O2]           transformation       
   [X]              Zip                                         transformation       
   [X]              Invert       [T1, T2] -> [T2, T1]           transformation       
   [X]              Reverse      [T1, T2] -> [T1, T2]           transformation       
   [X]              Shuffle      [T1, T2] -> [T1, T2]           transformation       
   [X]              Sample       [T1, T2] -> [T1, T2]           transformation       
   [X]              Choice       [T1, T2] -> [T1, T2]           transformation       
   [ ]              Head         [T1, T2] -> [T1, T2]           transformation       
   [ ]              Tail         [T1, T2] -> [T1, T2]           transformation       
   [X]              Repeat       T -> [int, T]                  transformation(init) 
   [X]              Range        int -> [int, int]              transformation(init) 
   [X]              Reduce       [T1, T2] -> O                  action               
   [ ]              Size         [T1, T2] -> int                action               
   [ ]              Exists       [T1, T2] -> bool               action               
   [ ]              All          [T1, T2] -> bool               action               
   [ ]              Any          [T1, T2] -> bool               action               
   [ ]              Count        [T1, T2] -> int                action               
   [ ]              ToSlice      [T1, T2] -> []T2               action               
   [ ]              ToMap        [T1, T2] -> map[T1]T2          action               
   [ ]              ToSet        [T1, T2] -> map[T1]struct{}    action               
   [ ]              Sum          [T1, T2] -> int                action               
   [ ]              Avg          [T1, T2] -> int                action               
   [X]              ForEach      [T1, T2] ->                    action               
   [ ]              Contains     [T1, T2] -> bool               action               
   [ ]              IndexOf      [T1, T2] -> []int              action               
   [ ]              LastIndexOf  [T1, T2] -> int                action               
   [X]              Values       [T1, T2] -> []T2               action               
   [X]              Keys         [T1, T2] -> []T1               action               
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
